/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

DEFINE_SAMPLER(0, source);
DEFINE_SAMPLER(1, filterData);
DEFINE_SAMPLER(2, freeTerm);
layout(std430, binding=1) writeonly buffer Result { float result[]; };

void perform(in int b, in int y, in int x, in int c4, in bool isProc)
{
	int resultPos = ((b * P.height + y) * P.width + x) * P.channels + c4 * 4;
	
	int inputYStart = y * P.stride.y - P.padding.y;
	int inputYEnd = inputYStart + P.filterHeight * P.dilation.y;
	int inputXStart = x * P.stride.x - P.padding.x;
	int inputXEnd = inputXStart + P.filterWidth * P.dilation.x;

	vec4 acc = (P.isFreeTerm == 0) ? vec4(0.) : TEXEL_GET(freeTerm, c4, 0);

	int inputChannelGroup = c4 / P.inputChannelGroupSize;
	int inputXShift = (b + inputChannelGroup * P.batchSize) * P.inputWidth;
	int inputYShift = (c4 - inputChannelGroup * P.inputChannelGroupSize) * P.inputHeight;

	int filterChannelGroup = c4 / P.filterChannelGroupSize;
	int filterXShift = P.filterWidth * filterChannelGroup;
	int filterYShift = (c4 - filterChannelGroup * P.filterChannelGroupSize) * P.filterHeight;

	int filterY = filterYShift;
	for(int j = inputYStart; j < inputYEnd; j += P.dilation.y, ++filterY) {
		int filterX = filterXShift;
		for(int i = inputXStart; i < inputXEnd; i += P.dilation.x, ++filterX) {
			if(isProc && 0 <= j && j < P.inputHeight && 0 <= i && i < P.inputWidth) {
				MULT_ADD_OPER(acc, TEXEL_GET(source, i + inputXShift, j + inputYShift),
					TEXEL_GET(filterData, filterX, filterY));
			}
		}
	}
	
	int rest = P.channels - c4 * 4;
	if(isProc) {
		result[resultPos++] = acc.x;
		if(rest > 1) {
			result[resultPos++] = acc.y;
			if(rest > 2) {
				result[resultPos++] = acc.z;
				if(rest > 3) {
					result[resultPos] = acc.w;
				}
			}
		}
	}
}

void main()
{
	int x = ID_X;
	int b = x / P.width;
	x -= b * P.width;
	int y = ID_Y;
	int c4 = y / P.height;
	y -= c4 * P.height;

	bool isProc = b < P.batchSize && c4 * 4 < P.channels;
	perform(b, y, x, c4, isProc);
}
