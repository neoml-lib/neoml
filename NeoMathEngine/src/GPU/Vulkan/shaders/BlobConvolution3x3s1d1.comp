/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

layout(std430, binding=1) readonly buffer Source { float source[]; };
layout(std430, binding=2) readonly buffer Filter { float flt[]; };
layout(std430, binding=3) readonly buffer FreeTerm { float freeTerm[]; };
layout(std430, binding=4) writeonly buffer Result { float result[]; };

#define CONVOLUTION_1X3(res, row0, row1, filterRow)	\
	MULT_ADD_OPER(res.x, row0.x, filterRow.x);		\
	MULT_ADD_OPER(res.x, row0.y, filterRow.y);		\
	MULT_ADD_OPER(res.x, row0.z, filterRow.z);		\
	MULT_ADD_OPER(res.y, row0.y, filterRow.x);		\
	MULT_ADD_OPER(res.y, row0.z, filterRow.y);		\
	MULT_ADD_OPER(res.y, row0.w, filterRow.z);		\
	MULT_ADD_OPER(res.z, row0.z, filterRow.x);		\
	MULT_ADD_OPER(res.z, row0.w, filterRow.y);		\
	MULT_ADD_OPER(res.z, row1.x, filterRow.z);		\
	MULT_ADD_OPER(res.w, row0.w, filterRow.x);		\
	MULT_ADD_OPER(res.w, row1.x, filterRow.y);		\
	MULT_ADD_OPER(res.w, row1.y, filterRow.z)

#define WRITE_LINE(VAR)											\
	result[outputPos] = VAR.x;									\
	if(restX > 1) {												\
		result[outputPos + P.filterCount] = VAR.y;				\
		if(restX > 2) {											\
			result[outputPos + 2 * P.filterCount] = VAR.z;		\
			if(restX > 3) {										\
				result[outputPos + 3 * P.filterCount] = VAR.w;	\
			}													\
		}														\
	}

void main()
{
	int height3 = (P.height + 2) / 3;

	int x = ID_X;
	int y = ID_Y;
	int b = y / height3;
	y -= b * height3;
	int c = ID_Z;

	if(x*4 >= P.width || c >= P.filterCount || b >= P.batchSize) {
		return;
	}

	int filterPos = c * P.inputChannels * 9;

	int yStart = y * 3;
	int xStart = x * 4;
	int inputYStart = yStart;
	int inputXStart = xStart;
	int inputPos = (b * P.inputHeight * P.inputChannels + inputYStart) * P.inputWidth + inputXStart;

	float initValue = (P.isFreeTerm != 0) ? freeTerm[c] : 0.;
	vec4 res0 = vec4(initValue);
	vec4 res1 = vec4(initValue);
	vec4 res2 = vec4(initValue);

	for (int channel = 0; channel < P.inputChannels; ++channel) {
		// read flt data
		vec3 filterRow0 = vec3(flt[filterPos], flt[filterPos + 1], flt[filterPos + 2]);
		filterPos += 3;
		vec3 filterRow1 = vec3(flt[filterPos], flt[filterPos + 1], flt[filterPos + 2]);
		filterPos += 3;
		vec3 filterRow2 = vec3(flt[filterPos], flt[filterPos + 1], flt[filterPos + 2]);
		filterPos += 3;

		// read 5x6 tile to convolute it into 3x4 output tile
		int inputRowPos = inputPos;
		vec4 row0;
		vec2 row1;

		// input row #0
		row0 = vec4(source[inputRowPos], source[inputRowPos + 1], source[inputRowPos + 2], source[inputRowPos + 3]);
		row1 = vec2(source[inputRowPos + 4], source[inputRowPos + 5]);
		CONVOLUTION_1X3(res0, row0, row1, filterRow0);

		// input row #1
		inputRowPos += P.inputWidth;
		row0 = vec4(source[inputRowPos], source[inputRowPos + 1], source[inputRowPos + 2], source[inputRowPos + 3]);
		row1 = vec2(source[inputRowPos + 4], source[inputRowPos + 5]);
		CONVOLUTION_1X3(res0, row0, row1, filterRow1);
		CONVOLUTION_1X3(res1, row0, row1, filterRow0);

		// input row #2
		inputRowPos += P.inputWidth;
		row0 = vec4(source[inputRowPos], source[inputRowPos + 1], source[inputRowPos + 2], source[inputRowPos + 3]);
		row1 = vec2(source[inputRowPos + 4], source[inputRowPos + 5]);
		CONVOLUTION_1X3(res0, row0, row1, filterRow2);
		CONVOLUTION_1X3(res1, row0, row1, filterRow1);
		CONVOLUTION_1X3(res2, row0, row1, filterRow0);

		// input row #3
		inputRowPos += P.inputWidth;
		row0 = vec4(source[inputRowPos], source[inputRowPos + 1], source[inputRowPos + 2], source[inputRowPos + 3]);
		row1 = vec2(source[inputRowPos + 4], source[inputRowPos + 5]);
		CONVOLUTION_1X3(res1, row0, row1, filterRow2);
		CONVOLUTION_1X3(res2, row0, row1, filterRow1);

		// input row #4
		inputRowPos += P.inputWidth;
		row0 = vec4(source[inputRowPos], source[inputRowPos + 1], source[inputRowPos + 2], source[inputRowPos + 3]);
		row1 = vec2(source[inputRowPos + 4], source[inputRowPos + 5]);
		CONVOLUTION_1X3(res2, row0, row1, filterRow2);

		inputPos += P.inputHeight * P.inputWidth;
	}

	// write output
	int outputPos = ((b * P.height + yStart) * P.width + xStart) * P.filterCount + c;

	int restX = P.width - xStart;
	int restY = P.height - yStart;

	WRITE_LINE(res0);
	if(restY > 1) {
		outputPos += P.width * P.filterCount;
		WRITE_LINE(res1);
		if(restY > 2) {
			outputPos += P.width * P.filterCount;
			WRITE_LINE(res2);
		}
	}
}
