/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

layout(std430, binding=1) readonly buffer Source { float sourceData[]; };
layout(std430, binding=2) readonly buffer Filter { float filtData[]; };
layout(std430, binding=3) readonly buffer FreeTerm { float freeTerm[]; };
layout(std430, binding=4) writeonly buffer Result { float result[]; };

float getData( int x, int y, int width, int height, int index )
{
    return ( 0 <= x && x < width && 0 <= y && y < height ) ? sourceData[index] : 0;
}

vec3 get3floats( int x, int y, int width, int height, int index, int step )
{
    vec3 res;
    res.x = getData(x, y, width, height, index);
    res.y = getData(x + 1, y, width, height, index + step);
    res.z = getData(x + 2, y, width, height, index + 2 * step);

    return res;
}

vec2 get2floats( int x, int y, int width, int height, int index, int step )
{
    vec2 res;
    res.x = getData(x, y, width, height, index);
    res.y = getData(x + 1, y, width, height, index + step);

    return res;
}

void set2floats( vec2 val, int x, int y, int width, int height, int descPos, int step )
{
    if( y < height ) {
		result[descPos] = val.x;
		if( x + 1 < width ) {
			result[descPos + step] = val.y;
		}
    }
}

#define CONVOLUTION1X3_STRIDE2(acc, src0, src1, weights) \
      MULT_ADD_OPER( acc.x, src0.x, weights.x ); \
      MULT_ADD_OPER( acc.y, src0.z, weights.x ); \
      MULT_ADD_OPER( acc.x, src0.y, weights.y ); \
      MULT_ADD_OPER( acc.y, src1.x, weights.y ); \
      MULT_ADD_OPER( acc.x, src0.z, weights.z ); \
      MULT_ADD_OPER( acc.y, src1.y, weights.z ); \

 
void main()
{
    const int combineW = 2;
    const int combineH = 2;

    int channelBlocksCount = ( P.height / combineH + ( P.height % combineH != 0 ? 1 : 0 ) ) * ( P.width / combineW + ( P.width % combineW != 0 ? 1 : 0 ) );
    
    int b = ID_Z;
    int c = ID_X;
    int g = ID_Y;

    if( b >= P.batchSize || g >= channelBlocksCount || c >= P.channels ) {
        return;
    }

    const int blocksInRow = P.width / combineW + ( P.width % combineW != 0 ? 1 : 0 );

    int filtDataPos = c;

    int sourceDataPos = b * P.inputWidth * P.inputHeight * P.channels + c;

    const int sourceX0 = -P.padding.x + 2 * ( g % blocksInRow ) * combineW;
    int sourceY = -P.padding.y + 2 * ( g / blocksInRow ) * combineH;
    int sourceGY = sourceY * P.inputWidth;

    const int resultX = ( g % blocksInRow ) * combineW;
    const int resultY = ( g / blocksInRow ) * combineH;

    int resultDataPos = b * P.height * P.width * P.channels + ( P.width * resultY + resultX ) * P.channels + c;

    vec2 values0 = P.isFreeTerm != 0 ? vec2(freeTerm[c]) : vec2(0.);
    vec2 values1 = P.isFreeTerm != 0 ? vec2(freeTerm[c]) : vec2(0.);

    vec3 weights0 = vec3(filtData[filtDataPos], filtData[filtDataPos + P.channels], filtData[filtDataPos + 2 * P.channels]);
    vec3 weights1 = vec3(filtData[filtDataPos + 3 * P.channels], filtData[filtDataPos + 4 * P.channels], filtData[filtDataPos + 5 * P.channels]);
    vec3 weights2 = vec3(filtData[filtDataPos + 6 * P.channels], filtData[filtDataPos + 7 * P.channels], filtData[filtDataPos+ 8 * P.channels]);

    vec3 src0 = get3floats(sourceX0, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0) * P.channels, P.channels);
    vec2 src1 = get2floats(sourceX0 + 3, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0 + 3) * P.channels, P.channels);

    CONVOLUTION1X3_STRIDE2(values0, src0, src1, weights0);

    sourceY += 1;
    sourceGY += P.inputWidth;
    src0 = get3floats(sourceX0, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0) * P.channels, P.channels);
    src1 = get2floats(sourceX0 + 3, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0 + 3) * P.channels, P.channels);

    CONVOLUTION1X3_STRIDE2(values0, src0, src1, weights1);

    sourceY += 1;
    sourceGY += P.inputWidth;
    src0 = get3floats(sourceX0, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0) * P.channels, P.channels);
    src1 = get2floats(sourceX0 + 3, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0 + 3) * P.channels, P.channels);

    CONVOLUTION1X3_STRIDE2(values0, src0, src1, weights2);
    CONVOLUTION1X3_STRIDE2(values1, src0, src1, weights0);

    sourceY += 1;
    sourceGY += P.inputWidth;
    src0 = get3floats(sourceX0, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0) * P.channels, P.channels);
    src1 = get2floats(sourceX0 + 3, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0 + 3) * P.channels, P.channels);

    CONVOLUTION1X3_STRIDE2(values1, src0, src1, weights1);

    sourceY += 1;
    sourceGY += P.inputWidth;
    src0 = get3floats(sourceX0, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0) * P.channels, P.channels);
    src1 = get2floats(sourceX0 + 3, sourceY, P.inputWidth, P.inputHeight, sourceDataPos + (sourceGY + sourceX0 + 3) * P.channels, P.channels);

    CONVOLUTION1X3_STRIDE2(values1, src0, src1, weights2);

    set2floats( values0, resultX, resultY, P.width, P.height, resultDataPos, P.channels );
    resultDataPos += P.width * P.channels;
    set2floats( values1, resultX, resultY + 1, P.width, P.height, resultDataPos, P.channels );
}