/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

layout(std430, binding=1) readonly buffer Source { float source[]; };
layout(std430, binding=2) writeonly buffer InvSum { float invSum[]; };
layout(std430, binding=3) writeonly buffer InvSumBeta { float invSumBeta[]; };
layout(std430, binding=4) writeonly buffer Result { float result[]; };

void main()
{
    int x = ID_X;
    int y = ID_Y;

    if( x >= P.vectorCount || y >= P.vectorSize ) {
        return;
    }

    const int rowStartOffset = x * P.vectorSize;
    const int offset = rowStartOffset + y;

    const int firstC = max( 0, y - ( P.windowSize - 1 ) / 2 );
	const int lastC = min( P.vectorSize - 1, y + P.windowSize / 2 );

    float res = 0;
    for( int i = firstC; i <= lastC; ++i ) {
        res += source[rowStartOffset + i] * source[rowStartOffset + i];
    }

    res = 1.f / ( P.bias + P.alpha * res / P.windowSize );
    // For now Vulkan doesn't support LRN backward that's why we can skip the next line
    // invSum[offset] = res;
    res = pow( res, P.beta );
    // For now Vulkan doesn't support LRN backward that's why we can skip the next line
    // invSumBeta[offset] = res;
    result[offset] = res * source[offset];
}
