if(NeoOnnx_BUILD_SHARED)
    add_library(${PROJECT_NAME} SHARED common.cpp)
else()
    add_library(${PROJECT_NAME} STATIC common.cpp)
endif()

add_library(NeoML::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_sources( ${PROJECT_NAME} PRIVATE
    NeoOnnx.cpp
    Node.cpp
    OpNodeAttributes.cpp
    Nodes/AbsNode.cpp
    Nodes/AddNode.cpp
    Nodes/BatchNormalizationNode.cpp
    Nodes/ClipNode.cpp
    Nodes/ConcatNode.cpp
    Nodes/ConstantNode.cpp
    Nodes/ConstantOfShapeNode.cpp
    Nodes/ConvNode.cpp
    Nodes/EluNode.cpp
    Nodes/FlattenNode.cpp
    Nodes/GatherNode.cpp
    Nodes/GemmNode.cpp
    Nodes/GlobalAveragePoolNode.cpp
    Nodes/GlobalPoolNodeBase.cpp
    Nodes/GraphInput.cpp
    Nodes/GraphInitializer.cpp
    Nodes/GraphOutput.cpp
    Nodes/LeakyReluNode.cpp
    Nodes/LstmNode.cpp
    Nodes/PoolNode.cpp
    Nodes/ReduceMeanNode.cpp
    Nodes/ReluNode.cpp
    Nodes/ReshapeNode.cpp
    Nodes/ShapeNode.cpp
    Nodes/SigmoidNode.cpp
    Nodes/SliceNode.cpp
    Nodes/SqueezeNode.cpp
    Nodes/TanhNode.cpp
    Nodes/UnsqueezeNode.cpp
    NodeUtils.cpp

    ../include/NeoOnnx/NeoOnnx.h
    ../include/NeoOnnx/NeoOnnxDefs.h
    Graph.h
    GraphCache.h
    NeoMLLink.h
    NeoOnnxCheck.h
    Node.h
    OpNodeAttributes.h
    Nodes/AbsNode.h
    Nodes/AddNode.h
    Nodes/BatchNormalizationNode.h
    Nodes/ClipNode.h
    Nodes/ConcatNode.h
    Nodes/ConstantNode.h
    Nodes/ConstantOfShapeNode.h
    Nodes/ConvNode.h
    Nodes/EluNode.h
    Nodes/FlattenNode.h
    Nodes/GatherNode.h
    Nodes/GemmNode.h
    Nodes/GlobalAveragePoolNode.h
    Nodes/GlobalPoolNodeBase.h
    Nodes/GraphInput.h
    Nodes/GraphInitializer.h
    Nodes/GraphOutput.h
    Nodes/LeakyReluNode.h
    Nodes/LstmNode.h
    Nodes/PoolNode.h
    Nodes/ReduceMeanNode.h
    Nodes/ReluNode.h
    Nodes/ReshapeNode.h
    Nodes/ShapeNode.h
    Nodes/SigmoidNode.h
    Nodes/SliceNode.h
    Nodes/SqueezeNode.h
    Nodes/TanhNode.h
    Nodes/UnsqueezeNode.h
    NodeUtils.h
    Tensor.h
    TensorUtils.h
)

if(ANDROID)
    set(CMAKE_LIBRARY_ARCHITECTURE ${ANDROID_ABI})
elseif(IOS)
    set(CMAKE_LIBRARY_ARCHITECTURE ${IOS_ARCH})
endif()

if(DEFINED ENV{Protobuf_ROOT} AND (IOS OR ANDROID))
    list(APPEND CMAKE_FIND_ROOT_PATH $ENV{Protobuf_ROOT})
endif()

set(Protobuf_USE_STATIC_LIBS ON)

find_package(Protobuf REQUIRED)

if(NOT Protobuf_PROTOC_EXECUTABLE)
    find_program(Protobuf_PROTOC_EXECUTABLE protoc)
    if(NOT Protobuf_PROTOC_EXECUTABLE)
        message(FATAL_ERROR "Protoc compiler wasn't found.")
    endif()
endif()
message(STATUS "Found protoc compiler: ${Protobuf_PROTOC_EXECUTABLE}")

protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS proto/onnx.proto)

target_sources(${PROJECT_NAME} PRIVATE ${PROTO_HDRS} ${PROTO_SRCS})

if(MSVC)
    # Because of the code generated by protobuf
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE /wd4946)
    endif()
    target_compile_options(${PROJECT_NAME} PRIVATE /W2)
    set_property(SOURCE ${PROTO_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /wd4251")
    target_compile_options(${PROJECT_NAME} PRIVATE /MD$<$<CONFIG:Debug>:d>)
elseif(NOT WIN32)
    set_property(SOURCE ${PROTO_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -Wno-pedantic ")
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE -Wno-nonportable-include-path)
    endif()
endif()

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/NeoOnnx/src>
)

target_compile_definitions(${PROJECT_NAME} PRIVATE BUILD_NEOONNX)
if(NOT NeoOnnx_BUILD_SHARED)
    target_compile_definitions(${PROJECT_NAME} PUBLIC STATIC_NEOONNX)
endif()

if(NeoOnnx_BUILD_SHARED AND NOT WIN32)
    set(EXPORT_SYMBOLS _ZN7NeoOnnx12LoadFromOnnxEPKcRN5NeoML4CDnnE _ZN7NeoOnnx12LoadFromOnnxEPKviRN5NeoML4CDnnE)
    if(LINUX OR ANDROID)
        set(EXPORT_SYMBOLS_STR "${EXPORT_SYMBOLS};")
        configure_file(../NeoOnnx.version.in NeoOnnx.version)
        target_link_options(${PROJECT_NAME} PRIVATE -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/NeoOnnx.version)
    elseif(DARWIN OR IOS)
            foreach(SYM ${EXPORT_SYMBOLS})
                target_link_options(${PROJECT_NAME} PRIVATE -Wl,-exported_symbol,_${SYM})
            endforeach() 
    endif()
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE protobuf::libprotobuf NeoML)
if(ANDROID)
    target_link_libraries(${PROJECT_NAME} PRIVATE log)
endif()

if(NOT USE_FINE_OBJECTS)
    target_include_directories(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/>)
endif()

if(WIN32)
    if(USE_FINE_OBJECTS)
        target_include_directories(${PROJECT_NAME} PRIVATE
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${CMAKE_CURRENT_SOURCE_DIR}/../../../Build/Inc ${FINE_ROOT}/FineObjects ${MESSAGES_DIR}>>
        )
    else()
        target_include_directories(${PROJECT_NAME} PRIVATE 
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${CMAKE_CURRENT_SOURCE_DIR}/../../Build/Inc>>
        )
    endif()
    
    enable_language(RC)
    target_sources(${PROJECT_NAME} PRIVATE ../NeoOnnx.rc)
endif()

configure_target(${PROJECT_NAME})
if(USE_FINE_OBJECTS)
    fine_unexport_symbols(${PROJECT_NAME})
endif()
