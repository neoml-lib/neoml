if(NeoOnnx_BUILD_SHARED)
    add_library(${PROJECT_NAME} SHARED common.cpp)
else()
    add_library(${PROJECT_NAME} STATIC common.cpp)
endif()

add_library(NeoML::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_sources( ${PROJECT_NAME} PRIVATE
    GraphInput.cpp
    GraphInitializer.cpp
    GraphOutput.cpp
    NeoOnnxImport.cpp
    NeoOnnxCheck.cpp
    LayerOperator.cpp
    Operator.cpp
    OperatorAttributes.cpp
    Operators/ActivationOperator.cpp
    Operators/BatchNormalizationOperator.cpp
    Operators/ConcatOperator.cpp
    Operators/ConstantOperator.cpp
    Operators/ConstantOfShapeOperator.cpp
    Operators/ConvOperator.cpp
    Operators/DropoutOperator.cpp
    Operators/EltwiseOperator.cpp
    Operators/FlattenOperator.cpp
    Operators/GatherOperator.cpp
    Operators/GemmOperator.cpp
    Operators/GlobalPoolOperator.cpp
    Operators/IdentityOperator.cpp
    Operators/LrnOperator.cpp
    Operators/LstmOperator.cpp
    Operators/MatMulOperator.cpp
    Operators/PadOperator.cpp
    Operators/PoolOperator.cpp
    Operators/ReshapeOperator.cpp
    Operators/ShapeOperator.cpp
    Operators/SliceOperator.cpp
    Operators/SoftmaxOperator.cpp
    Operators/SqueezeOperator.cpp
    Operators/TransposeOperator.cpp
    Operators/UnsqueezeOperator.cpp
    TensorUtils.cpp

    ../include/NeoOnnx/NeoOnnx.h
    ../include/NeoOnnx/NeoOnnxDefs.h
    ../include/NeoOnnx/NeoOnnxImport.h
    GraphInput.h
    GraphInitializer.h
    GraphOutput.h
    LayerOperator.h
    NeoOnnxCheck.h
    Operator.h
    OperatorAttributes.h
    Operators/ActivationOperator.h
    Operators/BatchNormalizationOperator.h
    Operators/ConcatOperator.h
    Operators/ConstantOperator.h
    Operators/ConstantOfShapeOperator.h
    Operators/ConvOperator.h
    Operators/DropoutOperator.h
    Operators/EltwiseOperator.h
    Operators/FlattenOperator.h
    Operators/GatherOperator.h
    Operators/GemmOperator.h
    Operators/GlobalPoolOperator.h
    Operators/IdentityOperator.h
    Operators/LrnOperator.h
    Operators/LstmOperator.h
    Operators/MatMulOperator.h
    Operators/PadOperator.h
    Operators/PoolOperator.h
    Operators/ReshapeOperator.h
    Operators/ShapeOperator.h
    Operators/SliceOperator.h
    Operators/SoftmaxOperator.h
    Operators/SqueezeOperator.h
    Operators/TransposeOperator.h
    Operators/UnsqueezeOperator.h
    Tensor.h
    TensorLayout.h
    TensorUtils.h
)

if(ANDROID)
    set(CMAKE_LIBRARY_ARCHITECTURE ${ANDROID_ABI})
elseif(IOS)
    set(CMAKE_LIBRARY_ARCHITECTURE ${IOS_ARCH})
endif()

if(DEFINED ENV{Protobuf_ROOT} AND (IOS OR ANDROID))
    list(APPEND CMAKE_FIND_ROOT_PATH $ENV{Protobuf_ROOT})
endif()

set(Protobuf_USE_STATIC_LIBS ON)

find_package(Protobuf REQUIRED)

if(NOT Protobuf_PROTOC_EXECUTABLE)
    find_program(Protobuf_PROTOC_EXECUTABLE protoc)
    if(NOT Protobuf_PROTOC_EXECUTABLE)
        message(FATAL_ERROR "Protoc compiler wasn't found.")
    endif()
endif()
message(STATUS "Found protoc compiler: ${Protobuf_PROTOC_EXECUTABLE}")

protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS proto/onnx.proto)

target_sources(${PROJECT_NAME} PRIVATE ${PROTO_HDRS} ${PROTO_SRCS})

if(MSVC)
    # Because of the code generated by protobuf
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE /wd4946)
    endif()
    target_compile_options(${PROJECT_NAME} PRIVATE /W2)
    set_property(SOURCE ${PROTO_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " /wd4251")
    target_compile_options(${PROJECT_NAME} PRIVATE /MD$<$<CONFIG:Debug>:d>)
elseif(NOT WIN32)
    set_property(SOURCE ${PROTO_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -Wno-pedantic ")
    if(USE_FINE_OBJECTS)
        target_compile_options(${PROJECT_NAME} PRIVATE -Wno-nonportable-include-path)
    endif()
endif()

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/NeoOnnx/src>
)

target_compile_definitions(${PROJECT_NAME} PRIVATE BUILD_NEOONNX)
if(NOT NeoOnnx_BUILD_SHARED)
    target_compile_definitions(${PROJECT_NAME} PUBLIC STATIC_NEOONNX)
endif()

if(NeoOnnx_BUILD_SHARED AND NOT WIN32)
    set(EXPORT_SYMBOLS
        _ZN7NeoOnnx12LoadFromOnnxEPKviRN5NeoML4CDnnERN4FObj6CArrayIPKcNS5_20CurrentMemoryManagerEEESB_
        _ZN7NeoOnnx12LoadFromOnnxEPKcRN5NeoML4CDnnERN4FObj6CArrayIS1_NS5_20CurrentMemoryManagerEEES9_)
    if(LINUX OR ANDROID)
        set(EXPORT_SYMBOLS_STR "${EXPORT_SYMBOLS};")
        configure_file(../NeoOnnx.version.in NeoOnnx.version)
        target_link_options(${PROJECT_NAME} PRIVATE -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/NeoOnnx.version)
    elseif(DARWIN OR IOS)
            foreach(SYM ${EXPORT_SYMBOLS})
                target_link_options(${PROJECT_NAME} PRIVATE -Wl,-exported_symbol,_${SYM})
            endforeach() 
    endif()
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE protobuf::libprotobuf NeoML)
if(ANDROID)
    target_link_libraries(${PROJECT_NAME} PRIVATE log)
endif()

if(NOT USE_FINE_OBJECTS)
    target_include_directories(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/>)
endif()

if(WIN32)
    if(USE_FINE_OBJECTS)
        target_include_directories(${PROJECT_NAME} PRIVATE
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${FINE_ROOT}/Build/Inc ${FINE_ROOT}/FineObjects ${MESSAGES_DIR}>>
        )
    else()
        target_include_directories(${PROJECT_NAME} PRIVATE 
            $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:RC>:${CMAKE_CURRENT_SOURCE_DIR}/../../Build/Inc>>
        )
    endif()
    
    enable_language(RC)
    target_sources(${PROJECT_NAME} PRIVATE ../NeoOnnx.rc)
endif()

configure_target(${PROJECT_NAME})
if(USE_FINE_OBJECTS)
    fine_unexport_symbols(${PROJECT_NAME})
endif()
